/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Main;

import java.lang.System.Logger;
import java.lang.System.Logger.Level;
import java.util.ArrayList;
import Clase.*;
import java.awt.Color;
import java.awt.Dimension;
import java.util.concurrent.Semaphore;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.SwingConstants;

/**
 *
 * @author Sammy Guergachi <sguergachi at gmail.com>
 */
public class Barberia extends javax.swing.JFrame {

    ArrayList<Cliente> clientes;
    int contador, posicionX = 0, posicionY = 0, verificacionCobro;
    Barbero barbero1, barbero2, barbero3;
    JLabel durmiendo = new JLabel();
    Semaphore mutex = new Semaphore(1, true);

    public Barberia() {
        initComponents();
        setVisible(true);
        setLocationRelativeTo(null);
        clientes = new ArrayList<Cliente>();
        contador = 0;

        barbero1 = new Barbero("Barbero 1", sillaUno, barraUno);
        barbero2 = new Barbero("Barbero 2", sillaDos, barraDos);
        barbero3 = new Barbero("Barbero 3", sillaTres, barraTres);
        verificacionCobro = 0;//si esta en cero no hay nadie cobrando, si esta en uno hay alguien cobrando en la caja registradora
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        btncrearClientes = new javax.swing.JButton();
        sillaUno = new javax.swing.JPanel();
        sillaDos = new javax.swing.JPanel();
        sillaTres = new javax.swing.JPanel();
        barraUno = new javax.swing.JProgressBar();
        barraDos = new javax.swing.JProgressBar();
        barraTres = new javax.swing.JProgressBar();
        cajaResgistadora = new javax.swing.JPanel();
        barraCobrar = new javax.swing.JProgressBar();
        esperaDePie = new javax.swing.JPanel();
        labelCobrando = new javax.swing.JLabel();
        sofaPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(214, 224, 230));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btncrearClientes.setText("Crear Clientes");
        btncrearClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncrearClientesActionPerformed(evt);
            }
        });
        jPanel2.add(btncrearClientes, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 480, -1, 40));

        sillaUno.setBackground(new java.awt.Color(214, 224, 230));

        javax.swing.GroupLayout sillaUnoLayout = new javax.swing.GroupLayout(sillaUno);
        sillaUno.setLayout(sillaUnoLayout);
        sillaUnoLayout.setHorizontalGroup(
            sillaUnoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 96, Short.MAX_VALUE)
        );
        sillaUnoLayout.setVerticalGroup(
            sillaUnoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 84, Short.MAX_VALUE)
        );

        jPanel2.add(sillaUno, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 70, -1, -1));

        sillaDos.setBackground(new java.awt.Color(214, 224, 230));

        javax.swing.GroupLayout sillaDosLayout = new javax.swing.GroupLayout(sillaDos);
        sillaDos.setLayout(sillaDosLayout);
        sillaDosLayout.setHorizontalGroup(
            sillaDosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 96, Short.MAX_VALUE)
        );
        sillaDosLayout.setVerticalGroup(
            sillaDosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 84, Short.MAX_VALUE)
        );

        jPanel2.add(sillaDos, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 70, -1, -1));

        sillaTres.setBackground(new java.awt.Color(214, 224, 230));

        javax.swing.GroupLayout sillaTresLayout = new javax.swing.GroupLayout(sillaTres);
        sillaTres.setLayout(sillaTresLayout);
        sillaTresLayout.setHorizontalGroup(
            sillaTresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 96, Short.MAX_VALUE)
        );
        sillaTresLayout.setVerticalGroup(
            sillaTresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 84, Short.MAX_VALUE)
        );

        jPanel2.add(sillaTres, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 70, -1, -1));

        barraUno.setStringPainted(true);
        jPanel2.add(barraUno, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 160, 96, -1));

        barraDos.setStringPainted(true);
        jPanel2.add(barraDos, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 160, 96, -1));

        barraTres.setStringPainted(true);
        jPanel2.add(barraTres, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 160, 96, -1));

        cajaResgistadora.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout cajaResgistadoraLayout = new javax.swing.GroupLayout(cajaResgistadora);
        cajaResgistadora.setLayout(cajaResgistadoraLayout);
        cajaResgistadoraLayout.setHorizontalGroup(
            cajaResgistadoraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 80, Short.MAX_VALUE)
        );
        cajaResgistadoraLayout.setVerticalGroup(
            cajaResgistadoraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );

        jPanel2.add(cajaResgistadora, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 280, 80, 40));

        barraCobrar.setStringPainted(true);
        jPanel2.add(barraCobrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 330, 80, -1));

        esperaDePie.setBackground(new java.awt.Color(214, 224, 230));
        esperaDePie.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        esperaDePie.setPreferredSize(new java.awt.Dimension(96, 336));

        javax.swing.GroupLayout esperaDePieLayout = new javax.swing.GroupLayout(esperaDePie);
        esperaDePie.setLayout(esperaDePieLayout);
        esperaDePieLayout.setHorizontalGroup(
            esperaDePieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 92, Short.MAX_VALUE)
        );
        esperaDePieLayout.setVerticalGroup(
            esperaDePieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 332, Short.MAX_VALUE)
        );

        jPanel2.add(esperaDePie, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, -1, -1));

        labelCobrando.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        labelCobrando.setForeground(new java.awt.Color(18, 79, 124));
        labelCobrando.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelCobrando.setText("Espera....");
        jPanel2.add(labelCobrando, new org.netbeans.lib.awtextra.AbsoluteConstraints(685, 350, 170, 60));

        sofaPanel.setBackground(new java.awt.Color(214, 224, 230));
        sofaPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        sofaPanel.setPreferredSize(new java.awt.Dimension(384, 84));

        javax.swing.GroupLayout sofaPanelLayout = new javax.swing.GroupLayout(sofaPanel);
        sofaPanel.setLayout(sofaPanelLayout);
        sofaPanelLayout.setHorizontalGroup(
            sofaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        sofaPanelLayout.setVerticalGroup(
            sofaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 80, Short.MAX_VALUE)
        );

        jPanel2.add(sofaPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 380, -1, -1));

        jLabel2.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(18, 79, 124));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("CAJA REGISTRADORA");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 240, 180, 40));

        jLabel3.setFont(new java.awt.Font("Yu Gothic UI", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(18, 79, 124));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("BARBERIA");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 20, 330, 40));

        jLabel4.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(18, 79, 124));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("SILLAS DE LOS BARBEROS");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 190, 180, 40));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 885, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 629, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Este metodo funciona para correr a los clientes una posicion para poder ser los siguientes en ser atendidos
    public void CorrerClientes() {
        int cont = 0;
        for (Cliente cliente : clientes) {
            System.out.println("cliente en proceso " + cliente.getLable().getText());
            /*
        Esta condicion corre hacia la izquierda los clientes 
        del panel de sofa, la condicion del contador es que debe de 
        ser menor a 3 ya que si habia 5 clietes en principio significa que habran 4 en sofa 
        y 1 de pie por lo tanto, si se elimina uno hay 3 en sofa y 1 de pie, y por lo tanto las posiciones 
        cambian, el que era posicion 1 sera ahora posicion 0, y si era posicion 4 que ya es una posicion
        para estar de pie ahora sera posicion 4 y debera de pasar a al final del sofa. 
             */
            if (cont < 3) {
                int x = cliente.getLable().getX();
                x = x - 96;
                cliente.getLable().setBounds(x, 0, 96, 84);
                sofaPanel.repaint();
            } else {
                System.out.println("contador " + cont);
                /*
            Esta condicion es si hay alguno en el panel de espera de pie, ahora el que esta al inicio de este
            panel debera de pasar al final del panel de sofa. 
                 */
                if (cont == 3) {
                    System.out.println("entro " + cliente.getLable().getText());
                    esperaDePie.remove(cliente.getLable());
                    esperaDePie.repaint();
                    cliente.getLable().setBounds(282, 0, 96, 84);
                    sofaPanel.add(cliente.getLable());
                    sofaPanel.repaint();
                } /*
            Esta condicion es para correr hacia arriba los clientes del panel de espera de pie 
                 */ else {
                    int y = cliente.getLable().getY();
                    y = y - 84;
                    cliente.getLable().setBounds(0, y, 96, 84);
                    esperaDePie.repaint();
                }
            }
            cont++;
        }
        if (clientes.size() < 4) {
            posicionX -= 96;
        } else {
            posicionY -= 84;
        }
    }
    public void atender_cliente(){
        if (clientes.size() != 0) {
            //Simpre buscaremos atender al cliente que esta en la posicion 0. por respetar una fila  
            Cliente cliente = clientes.get(0);
            if (barbero1.getEstado() != 1) {
                sofaPanel.remove(cliente.getLable());
                sofaPanel.repaint();
                barbero1.getPanel().remove(durmiendo);
                barbero1.getPanel().repaint();
                cliente.cambar();
                barbero1.AgragarCliente(cliente.getLable());
                barbero1.setEstado(1);
                barbero1.setCliente(cliente);
                clientes.remove(0);
                CorrerClientes();
                AtenderCliente atender = new AtenderCliente(barbero1.getBarra(), barbero1);
                atender.start();
            } else if (barbero2.getEstado() != 1) {
                sofaPanel.remove(cliente.getLable());
                sofaPanel.repaint();
                barbero2.getPanel().remove(durmiendo);
                barbero2.getPanel().repaint();
                cliente.cambar();
                barbero2.AgragarCliente(cliente.getLable());
                barbero2.setEstado(1);
                barbero2.setCliente(cliente);
                clientes.remove(0);
                CorrerClientes();
                AtenderCliente atender = new AtenderCliente(barbero2.getBarra(), barbero2);
                atender.start();
            } else if (barbero3.getEstado() != 1) {
                sofaPanel.remove(cliente.getLable());
                sofaPanel.repaint();
                barbero3.getPanel().remove(durmiendo);
                barbero3.getPanel().repaint();
                cliente.cambar();
                barbero3.AgragarCliente(cliente.getLable());
                barbero3.setEstado(1);
                barbero3.setCliente(cliente);
                clientes.remove(0);
                CorrerClientes();
                AtenderCliente atender = new AtenderCliente(barbero3.getBarra(), barbero3);
                atender.start();
            } else {
            }

        } else {
            JOptionPane.showMessageDialog(null, "No hay clientes para atender", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    private void btncrearClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncrearClientesActionPerformed
        String nombre = "Cliente " + (contador + 1);
        Cliente cliente = new Cliente();
        cliente.setNombre(nombre);
        if (clientes.size() < 4) { //Clientes que esperan en le sofa
            System.out.println("posicion en X " + posicionX);
            cliente.getLable().setBounds(posicionX, 0, 96, 84);
            JLabel m = cliente.getLable();
            try {
                mutex.acquire();
            } catch (InterruptedException ex) {
                java.util.logging.Logger.getLogger(Barberia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
            sofaPanel.add(m);
            sofaPanel.repaint();
            posicionX += 94;
            mutex.release();
            clientes.add(cliente);
            contador++;
            atender_cliente();
        } else if (clientes.size() < 8) {//Clientes que esperan de pie
            cliente.getLable().setBounds(0, posicionY, 96, 84);
            try {
                mutex.acquire();
            } catch (InterruptedException ex) {
                java.util.logging.Logger.getLogger(Barberia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
            esperaDePie.add(cliente.getLable());
            esperaDePie.repaint();
            posicionY += 84;
            mutex.release();
            clientes.add(cliente);
            contador++;
            atender_cliente();
        } else {
            System.out.println("ESPACIO LLENO");
        }
    }//GEN-LAST:event_btncrearClientesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Barberia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Barberia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Barberia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Barberia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Barberia().setVisible(true);
            }
        });
    }

    public class AtenderCliente extends Thread {

        JProgressBar barra;
        Barbero barbero;

        public AtenderCliente(JProgressBar barra, Barbero barbero) {
            this.barra = barra;
            this.barbero = barbero;
        }

        @Override
        public void run() {
            for (int i = 1; i <= 100; i++) {
                try {
                    Thread.sleep(25);
                } catch (InterruptedException ex) {
                    java.util.logging.Logger.getLogger(Barberia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                }
                barra.setValue(i);
            }
            boolean aux = true;
            while (aux) {
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    java.util.logging.Logger.getLogger(Barberia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                }
                if (verificacionCobro == 0) {
                    CobrarCliente cobrar = new CobrarCliente(barbero);
                    cobrar.start();
                    aux = false;
                }

            }
            System.out.println("borra cliente");
            barbero.getPanel().remove(barbero.getCliente().getLable());
            barbero.getPanel().repaint();
            barra.setValue(0);
        }

    }

    public class CobrarCliente extends Thread {

        Barbero barbero;
        JLabel label = new JLabel();

        public CobrarCliente(Barbero barbero) {
            this.barbero = barbero;
            verificacionCobro = 1;
            cajaResgistadora.setBackground(Color.GREEN);
            String text = "<html><body>" + "Cobrando a " + this.barbero.getCliente().getNombre() + "<br>" + "el barbero " + barbero.getNombre() + "</body></html>";
            labelCobrando.setText(text);
            label.setPreferredSize(new Dimension(96, 84));
            label.setIcon(new ImageIcon("src/img/pagando.png"));
            System.out.println("entro");
            barbero.AgragarCliente(label);
        }

        @Override
        public void run() {
            for (int i = 1; i <= 100; i++) {
                try {
                    Thread.sleep(50);
                } catch (InterruptedException ex) {
                    java.util.logging.Logger.getLogger(Barberia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                }
                barraCobrar.setValue(i);
            }
            //termina de cobrar
            barbero.setEstado(0);//regresamos al estado cero al barbero
            cajaResgistadora.setBackground(Color.black);
            labelCobrando.setText("Espera...");
            barraCobrar.setValue(0);
            verificacionCobro = 0;//la caja ahora esta en espera
            barbero.getPanel().remove(label);
            barbero.getPanel().repaint();
            durmiendo.setPreferredSize(new Dimension(96, 84));
            durmiendo.setIcon(new ImageIcon("src/img/durmiendo.png"));
            System.out.println("entro");
            barbero.AgragarCliente(durmiendo);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar barraCobrar;
    private javax.swing.JProgressBar barraDos;
    private javax.swing.JProgressBar barraTres;
    private javax.swing.JProgressBar barraUno;
    private javax.swing.JButton btncrearClientes;
    private javax.swing.JPanel cajaResgistadora;
    private javax.swing.JPanel esperaDePie;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel labelCobrando;
    private javax.swing.JPanel sillaDos;
    private javax.swing.JPanel sillaTres;
    private javax.swing.JPanel sillaUno;
    private javax.swing.JPanel sofaPanel;
    // End of variables declaration//GEN-END:variables
}
